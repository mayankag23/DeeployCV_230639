import cv2
import numpy as np
import matplotlib.pyplot as plt

# Function for Grey scaling
def grey_scaling(image):
    return cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Function for Thresholding (Binary and Multi-level Thresholding)
def thresholding(image):
    _, binary = cv2.threshold(image, 127, 255, cv2.THRESH_BINARY)

    # 16 Levels Thresholding
    sixteen_level = np.floor(image / 16) * 16

    # 256 Levels Thresholding
    two_fifty_six_level = image

    # 32 Levels Thresholding
    thirty_two_level = np.floor(image / 8) * 8

    return binary, sixteen_level, two_fifty_six_level, thirty_two_level

# Function for Sobel Filter and Canny Edge Detection
def sobel_canny(image):
    sobel_x = cv2.Sobel(image, cv2.CV_64F, 1, 0, ksize=3)
    sobel_y = cv2.Sobel(image, cv2.CV_64F, 0, 1, ksize=3)
    sobel_combined = cv2.magnitude(sobel_x, sobel_y)

    canny_edges = cv2.Canny(image, 100, 200)

    return sobel_combined, canny_edges

# Function to remove noise using Gaussian kernel
def gaussian_blur(image):
    kernel = np.array([[1, 4, 6, 4, 1], [4, 16, 24, 16, 4], [6, 24, 36, 24, 6], [4, 16, 24, 16, 4], [1, 4, 6, 4, 1]],
                      dtype=np.float32) / 256
    blurred_image = cv2.filter2D(image, -1, kernel)
    return blurred_image

# Function to sharpen the image
def sharpen_image(image):
    kernel = np.array([[0, -1, 0], [-1, 5, -1], [0, -1, 0]], dtype=np.float32)
    sharpened_image = cv2.filter2D(image, -1, kernel)
    return sharpened_image

# Function to convert RGB to BGR (OpenCV uses BGR by default)
def rgb_to_bgr(image):
    return cv2.cvtColor(image, cv2.COLOR_RGB2BGR)

# Function to display images in a subplot
def show(name, n, m, i, title):
    plt.subplot(n, m, i)
    plt.imshow(name, cmap='gray')
    plt.title(title)
    plt.axis('off')

# Capture an image from the camera
cap = cv2.VideoCapture(0)
ret, frame = cap.read()
cap.release()

if not ret:
    print("Failed to capture image")
    exit()

# Applying functions
grey = grey_scaling(frame)
binary, sixteen, two_fifty_six, thirty_two = thresholding(grey)
sobel, canny = sobel_canny(grey)
blurred = gaussian_blur(grey)
sharpened = sharpen_image(blurred)
bgr_image = rgb_to_bgr(frame)

# Plotting all the results using the show function in a 2x4 grid
plt.figure(figsize=(12, 8))

# Grey scaling image
show(grey, 2, 4, 1, 'Grey Scaling')

# Binary Thresholding
show(binary, 2, 4, 2, 'Binary Threshold')

# 16 Levels Thresholding
show(sixteen, 2, 4, 3, '16 Levels Threshold')

# 256 Levels Thresholding
show(two_fifty_six, 2, 4, 4, '256 Levels Threshold')

# Sobel Filter
show(sobel, 2, 4, 5, 'Sobel Filter')

# Canny Edge Detector
show(canny, 2, 4, 6, 'Canny Edge Detector')

# Gaussian Blur
show(blurred, 2, 4, 7, 'Gaussian Blur')

# Sharpened Image
show(sharpened, 2, 4, 8, 'Sharpened Image')

plt.tight_layout()
plt.show()

